//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JavadocLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Eir.JavaDocParser.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class JavadocLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NAME=1, NEWLINE=2, SPACE=3, TEXT_CONTENT=4, AT=5, STAR=6, SLASH=7, JAVADOC_START=8, 
		JAVADOC_END=9, INLINE_TAG_START=10, BRACE_OPEN=11, BRACE_CLOSE=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NAME", "NEWLINE", "SPACE", "TEXT_CONTENT", "AT", "STAR", "SLASH", "JAVADOC_START", 
		"JAVADOC_END", "INLINE_TAG_START", "BRACE_OPEN", "BRACE_CLOSE"
	};


	public JavadocLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public JavadocLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'@'", "'*'", "'/'", null, null, "'{@'", 
		"'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAME", "NEWLINE", "SPACE", "TEXT_CONTENT", "AT", "STAR", "SLASH", 
		"JAVADOC_START", "JAVADOC_END", "INLINE_TAG_START", "BRACE_OPEN", "BRACE_CLOSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavadocLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JavadocLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1 : return NEWLINE_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool NEWLINE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.InputStream.LA(1) != '/';
		case 1: return this.InputStream.LA(1) != '/';
		case 2: return this.InputStream.LA(1) != '/';
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', 'x', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', 
		'\x6', '\x2', '\x1D', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x1E', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '#', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '(', '\n', '\x3', '\r', '\x3', 
		'\xE', '\x3', ')', '\x5', '\x3', ',', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x32', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\x37', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\x38', '\x5', '\x3', ';', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '?', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\x44', '\n', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\x45', '\x5', '\x3', 'H', '\n', '\x3', '\x5', '\x3', 'J', 
		'\n', '\x3', '\x3', '\x4', '\x6', '\x4', 'M', '\n', '\x4', '\r', '\x4', 
		'\xE', '\x4', 'N', '\x3', '\x5', '\x6', '\x5', 'R', '\n', '\x5', '\r', 
		'\x5', '\xE', '\x5', 'S', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\x61', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\x64', '\v', '\t', '\x3', '\n', '\x5', '\n', 'g', '\n', 
		'\n', '\x3', '\n', '\a', '\n', 'j', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'm', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x2', '\x2', '\xE', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', 
		'\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', 
		'\f', '\x17', '\r', '\x19', '\xE', '\x3', '\x2', '\x5', '\x4', '\x2', 
		'\x43', '\\', '\x63', '|', '\x4', '\x2', '\v', '\v', '\"', '\"', '\n', 
		'\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', ',', ',', '\x31', '\x31', 
		'\x42', '\\', '\x63', '}', '\x7F', '\x7F', '\x2', '\x88', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x5', 'I', '\x3', '\x2', '\x2', '\x2', '\a', 
		'L', '\x3', '\x2', '\x2', '\x2', '\t', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\v', 'U', '\x3', '\x2', '\x2', '\x2', '\r', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\xF', 'Y', '\x3', '\x2', '\x2', '\x2', '\x11', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x66', '\x3', '\x2', '\x2', '\x2', '\x15', 'q', 
		'\x3', '\x2', '\x2', '\x2', '\x17', 't', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1D', '\t', '\x2', '\x2', '\x2', 
		'\x1C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', '\x4', '\x3', '\x2', '\x2', '\x2', 
		' ', '+', '\a', '\f', '\x2', '\x2', '!', '#', '\x5', '\a', '\x4', '\x2', 
		'\"', '!', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', 
		'\x2', '#', '\'', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x5', '\r', '\a', 
		'\x2', '%', '&', '\x6', '\x3', '\x2', '\x2', '&', '(', '\x3', '\x2', '\x2', 
		'\x2', '\'', '$', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', 
		'\x2', '\x2', '\x2', '*', ',', '\x3', '\x2', '\x2', '\x2', '+', '\"', 
		'\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', 
		'J', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '\xF', '\x2', '\x2', 
		'.', '/', '\a', '\f', '\x2', '\x2', '/', ':', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x32', '\x5', '\a', '\x4', '\x2', '\x31', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x5', '\r', '\a', '\x2', 
		'\x34', '\x35', '\x6', '\x3', '\x3', '\x2', '\x35', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x33', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x31', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', 
		'\x2', '\x2', '\x2', ';', 'J', '\x3', '\x2', '\x2', '\x2', '<', 'G', '\a', 
		'\xF', '\x2', '\x2', '=', '?', '\x5', '\a', '\x4', '\x2', '>', '=', '\x3', 
		'\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x5', '\r', '\a', '\x2', '\x41', 
		'\x42', '\x6', '\x3', '\x4', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '@', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'G', '>', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'J', '\x3', '\x2', '\x2', '\x2', 'I', ' ', '\x3', '\x2', '\x2', 
		'\x2', 'I', '-', '\x3', '\x2', '\x2', '\x2', 'I', '<', '\x3', '\x2', '\x2', 
		'\x2', 'J', '\x6', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\t', '\x3', 
		'\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'O', '\b', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\n', '\x4', 
		'\x2', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\n', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\x42', 
		'\x2', '\x2', 'V', '\f', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', ',', 
		'\x2', '\x2', 'X', '\xE', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', 
		'\x31', '\x2', '\x2', 'Z', '\x10', '\x3', '\x2', '\x2', '\x2', '[', '\\', 
		'\a', '\x31', '\x2', '\x2', '\\', ']', '\a', ',', '\x2', '\x2', ']', '^', 
		'\a', ',', '\x2', '\x2', '^', '\x62', '\x3', '\x2', '\x2', '\x2', '_', 
		'\x61', '\x5', '\r', '\a', '\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x64', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x65', 'g', '\x5', '\a', '\x4', '\x2', '\x66', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'j', '\x5', '\r', '\a', '\x2', 'i', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', 
		',', '\x2', '\x2', 'o', 'p', '\a', '\x31', '\x2', '\x2', 'p', '\x14', 
		'\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '}', '\x2', '\x2', 'r', 's', 
		'\a', '\x42', '\x2', '\x2', 's', '\x16', '\x3', '\x2', '\x2', '\x2', 't', 
		'u', '\a', '}', '\x2', '\x2', 'u', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\a', '\x7F', '\x2', '\x2', 'w', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x2', '\x1E', '\"', ')', '+', '\x31', '\x38', ':', '>', 
		'\x45', 'G', 'I', 'N', 'S', '\x62', '\x66', 'k', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Eir.JavaDocParser.Parser
