//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JavadocParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Eir.JavaDocParser.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class JavadocParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NAME=1, NEWLINE=2, SPACE=3, TEXT_CONTENT=4, AT=5, STAR=6, SLASH=7, JAVADOC_START=8, 
		JAVADOC_END=9, INLINE_TAG_START=10, BRACE_OPEN=11, BRACE_CLOSE=12;
	public const int
		RULE_documentation = 0, RULE_documentationContent = 1, RULE_skipWhitespace = 2, 
		RULE_description = 3, RULE_descriptionLine = 4, RULE_descriptionLineStart = 5, 
		RULE_descriptionLineNoSpaceNoAt = 6, RULE_descriptionLineElement = 7, 
		RULE_descriptionLineText = 8, RULE_descriptionNewline = 9, RULE_tagSection = 10, 
		RULE_blockTag = 11, RULE_blockTagName = 12, RULE_blockTagContent = 13, 
		RULE_blockTagText = 14, RULE_blockTagTextElement = 15, RULE_inlineTag = 16, 
		RULE_inlineTagName = 17, RULE_inlineTagContent = 18, RULE_braceExpression = 19, 
		RULE_braceContent = 20, RULE_braceText = 21;
	public static readonly string[] ruleNames = {
		"documentation", "documentationContent", "skipWhitespace", "description", 
		"descriptionLine", "descriptionLineStart", "descriptionLineNoSpaceNoAt", 
		"descriptionLineElement", "descriptionLineText", "descriptionNewline", 
		"tagSection", "blockTag", "blockTagName", "blockTagContent", "blockTagText", 
		"blockTagTextElement", "inlineTag", "inlineTagName", "inlineTagContent", 
		"braceExpression", "braceContent", "braceText"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'@'", "'*'", "'/'", null, null, "'{@'", 
		"'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAME", "NEWLINE", "SPACE", "TEXT_CONTENT", "AT", "STAR", "SLASH", 
		"JAVADOC_START", "JAVADOC_END", "INLINE_TAG_START", "BRACE_OPEN", "BRACE_CLOSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavadocParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JavadocParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavadocParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavadocParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentationContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(JavadocParser.Eof, 0); }
		public ITerminalNode JAVADOC_START() { return GetToken(JavadocParser.JAVADOC_START, 0); }
		public DocumentationContentContext documentationContent() {
			return GetRuleContext<DocumentationContentContext>(0);
		}
		public ITerminalNode JAVADOC_END() { return GetToken(JavadocParser.JAVADOC_END, 0); }
		public SkipWhitespaceContext[] skipWhitespace() {
			return GetRuleContexts<SkipWhitespaceContext>();
		}
		public SkipWhitespaceContext skipWhitespace(int i) {
			return GetRuleContext<SkipWhitespaceContext>(i);
		}
		public DocumentationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_documentation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocumentation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentationContext documentation() {
		DocumentationContext _localctx = new DocumentationContext(Context, State);
		EnterRule(_localctx, 0, RULE_documentation);
		try {
			int _alt;
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44; Match(Eof);
				}
				break;
			case JAVADOC_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45; Match(JAVADOC_START);
				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 46; skipWhitespace();
						}
						} 
					}
					State = 51;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				}
				State = 52; documentationContent();
				State = 53; Match(JAVADOC_END);
				State = 54; Match(Eof);
				}
				break;
			case NAME:
			case NEWLINE:
			case SPACE:
			case TEXT_CONTENT:
			case AT:
			case STAR:
			case SLASH:
			case INLINE_TAG_START:
			case BRACE_OPEN:
			case BRACE_CLOSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 56; skipWhitespace();
						}
						} 
					}
					State = 61;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				State = 62; documentationContent();
				State = 63; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocumentationContentContext : ParserRuleContext {
		public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		public SkipWhitespaceContext[] skipWhitespace() {
			return GetRuleContexts<SkipWhitespaceContext>();
		}
		public SkipWhitespaceContext skipWhitespace(int i) {
			return GetRuleContext<SkipWhitespaceContext>(i);
		}
		public TagSectionContext tagSection() {
			return GetRuleContext<TagSectionContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(JavadocParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(JavadocParser.NEWLINE, i);
		}
		public DocumentationContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_documentationContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocumentationContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentationContentContext documentationContent() {
		DocumentationContentContext _localctx = new DocumentationContentContext(Context, State);
		EnterRule(_localctx, 2, RULE_documentationContent);
		int _la;
		try {
			int _alt;
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; description();
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE || _la==SPACE) {
					{
					{
					State = 68; skipWhitespace();
					}
					}
					State = 73;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 74; skipWhitespace();
						}
						} 
					}
					State = 79;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				State = 80; tagSection();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 81; description();
				State = 83;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 82; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 85;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 87; skipWhitespace();
						}
						} 
					}
					State = 92;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				State = 93; tagSection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipWhitespaceContext : ParserRuleContext {
		public ITerminalNode SPACE() { return GetToken(JavadocParser.SPACE, 0); }
		public ITerminalNode NEWLINE() { return GetToken(JavadocParser.NEWLINE, 0); }
		public SkipWhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipWhitespace; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipWhitespaceContext skipWhitespace() {
		SkipWhitespaceContext _localctx = new SkipWhitespaceContext(Context, State);
		EnterRule(_localctx, 4, RULE_skipWhitespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_la = TokenStream.LA(1);
			if ( !(_la==NEWLINE || _la==SPACE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		public DescriptionLineContext[] descriptionLine() {
			return GetRuleContexts<DescriptionLineContext>();
		}
		public DescriptionLineContext descriptionLine(int i) {
			return GetRuleContext<DescriptionLineContext>(i);
		}
		public DescriptionNewlineContext[] descriptionNewline() {
			return GetRuleContexts<DescriptionNewlineContext>();
		}
		public DescriptionNewlineContext descriptionNewline(int i) {
			return GetRuleContext<DescriptionNewlineContext>(i);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 6, RULE_description);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; descriptionLine();
			State = 109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 100; descriptionNewline();
						}
						}
						State = 103;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NEWLINE );
					State = 105; descriptionLine();
					}
					} 
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionLineContext : ParserRuleContext {
		public DescriptionLineStartContext descriptionLineStart() {
			return GetRuleContext<DescriptionLineStartContext>(0);
		}
		public DescriptionLineElementContext[] descriptionLineElement() {
			return GetRuleContexts<DescriptionLineElementContext>();
		}
		public DescriptionLineElementContext descriptionLineElement(int i) {
			return GetRuleContext<DescriptionLineElementContext>(i);
		}
		public InlineTagContext inlineTag() {
			return GetRuleContext<InlineTagContext>(0);
		}
		public DescriptionLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptionLine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptionLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionLineContext descriptionLine() {
		DescriptionLineContext _localctx = new DescriptionLineContext(Context, State);
		EnterRule(_localctx, 8, RULE_descriptionLine);
		try {
			int _alt;
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
			case SPACE:
			case TEXT_CONTENT:
			case STAR:
			case SLASH:
			case BRACE_OPEN:
			case BRACE_CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; descriptionLineStart();
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 113; descriptionLineElement();
						}
						} 
					}
					State = 118;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				}
				break;
			case INLINE_TAG_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; inlineTag();
				State = 123;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 120; descriptionLineElement();
						}
						} 
					}
					State = 125;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionLineStartContext : ParserRuleContext {
		public ITerminalNode[] SPACE() { return GetTokens(JavadocParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(JavadocParser.SPACE, i);
		}
		public DescriptionLineNoSpaceNoAtContext[] descriptionLineNoSpaceNoAt() {
			return GetRuleContexts<DescriptionLineNoSpaceNoAtContext>();
		}
		public DescriptionLineNoSpaceNoAtContext descriptionLineNoSpaceNoAt(int i) {
			return GetRuleContext<DescriptionLineNoSpaceNoAtContext>(i);
		}
		public ITerminalNode[] AT() { return GetTokens(JavadocParser.AT); }
		public ITerminalNode AT(int i) {
			return GetToken(JavadocParser.AT, i);
		}
		public DescriptionLineStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptionLineStart; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptionLineStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionLineStartContext descriptionLineStart() {
		DescriptionLineStartContext _localctx = new DescriptionLineStartContext(Context, State);
		EnterRule(_localctx, 10, RULE_descriptionLineStart);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 128; Match(SPACE);
				}
			}

			State = 132;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 131; descriptionLineNoSpaceNoAt();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 139;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NAME:
					case TEXT_CONTENT:
					case STAR:
					case SLASH:
					case BRACE_OPEN:
					case BRACE_CLOSE:
						{
						State = 136; descriptionLineNoSpaceNoAt();
						}
						break;
					case SPACE:
						{
						State = 137; Match(SPACE);
						}
						break;
					case AT:
						{
						State = 138; Match(AT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionLineNoSpaceNoAtContext : ParserRuleContext {
		public ITerminalNode TEXT_CONTENT() { return GetToken(JavadocParser.TEXT_CONTENT, 0); }
		public ITerminalNode NAME() { return GetToken(JavadocParser.NAME, 0); }
		public ITerminalNode STAR() { return GetToken(JavadocParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(JavadocParser.SLASH, 0); }
		public ITerminalNode BRACE_OPEN() { return GetToken(JavadocParser.BRACE_OPEN, 0); }
		public ITerminalNode BRACE_CLOSE() { return GetToken(JavadocParser.BRACE_CLOSE, 0); }
		public DescriptionLineNoSpaceNoAtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptionLineNoSpaceNoAt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptionLineNoSpaceNoAt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionLineNoSpaceNoAtContext descriptionLineNoSpaceNoAt() {
		DescriptionLineNoSpaceNoAtContext _localctx = new DescriptionLineNoSpaceNoAtContext(Context, State);
		EnterRule(_localctx, 12, RULE_descriptionLineNoSpaceNoAt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << TEXT_CONTENT) | (1L << STAR) | (1L << SLASH) | (1L << BRACE_OPEN) | (1L << BRACE_CLOSE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionLineElementContext : ParserRuleContext {
		public InlineTagContext inlineTag() {
			return GetRuleContext<InlineTagContext>(0);
		}
		public DescriptionLineTextContext descriptionLineText() {
			return GetRuleContext<DescriptionLineTextContext>(0);
		}
		public DescriptionLineElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptionLineElement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptionLineElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionLineElementContext descriptionLineElement() {
		DescriptionLineElementContext _localctx = new DescriptionLineElementContext(Context, State);
		EnterRule(_localctx, 14, RULE_descriptionLineElement);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INLINE_TAG_START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; inlineTag();
				}
				break;
			case NAME:
			case SPACE:
			case TEXT_CONTENT:
			case AT:
			case STAR:
			case SLASH:
			case BRACE_OPEN:
			case BRACE_CLOSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; descriptionLineText();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionLineTextContext : ParserRuleContext {
		public DescriptionLineNoSpaceNoAtContext[] descriptionLineNoSpaceNoAt() {
			return GetRuleContexts<DescriptionLineNoSpaceNoAtContext>();
		}
		public DescriptionLineNoSpaceNoAtContext descriptionLineNoSpaceNoAt(int i) {
			return GetRuleContext<DescriptionLineNoSpaceNoAtContext>(i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(JavadocParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(JavadocParser.SPACE, i);
		}
		public ITerminalNode[] AT() { return GetTokens(JavadocParser.AT); }
		public ITerminalNode AT(int i) {
			return GetToken(JavadocParser.AT, i);
		}
		public DescriptionLineTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptionLineText; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptionLineText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionLineTextContext descriptionLineText() {
		DescriptionLineTextContext _localctx = new DescriptionLineTextContext(Context, State);
		EnterRule(_localctx, 16, RULE_descriptionLineText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 153;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NAME:
					case TEXT_CONTENT:
					case STAR:
					case SLASH:
					case BRACE_OPEN:
					case BRACE_CLOSE:
						{
						State = 150; descriptionLineNoSpaceNoAt();
						}
						break;
					case SPACE:
						{
						State = 151; Match(SPACE);
						}
						break;
					case AT:
						{
						State = 152; Match(AT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionNewlineContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(JavadocParser.NEWLINE, 0); }
		public DescriptionNewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptionNewline; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptionNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionNewlineContext descriptionNewline() {
		DescriptionNewlineContext _localctx = new DescriptionNewlineContext(Context, State);
		EnterRule(_localctx, 18, RULE_descriptionNewline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagSectionContext : ParserRuleContext {
		public BlockTagContext[] blockTag() {
			return GetRuleContexts<BlockTagContext>();
		}
		public BlockTagContext blockTag(int i) {
			return GetRuleContext<BlockTagContext>(i);
		}
		public TagSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagSection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagSectionContext tagSection() {
		TagSectionContext _localctx = new TagSectionContext(Context, State);
		EnterRule(_localctx, 20, RULE_tagSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 159; blockTag();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SPACE || _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTagContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(JavadocParser.AT, 0); }
		public BlockTagNameContext blockTagName() {
			return GetRuleContext<BlockTagNameContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(JavadocParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(JavadocParser.SPACE, i);
		}
		public BlockTagContentContext[] blockTagContent() {
			return GetRuleContexts<BlockTagContentContext>();
		}
		public BlockTagContentContext blockTagContent(int i) {
			return GetRuleContext<BlockTagContentContext>(i);
		}
		public BlockTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockTag; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockTagContext blockTag() {
		BlockTagContext _localctx = new BlockTagContext(Context, State);
		EnterRule(_localctx, 22, RULE_blockTag);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 164; Match(SPACE);
				}
			}

			State = 167; Match(AT);
			State = 168; blockTagName();
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 169; Match(SPACE);
				}
				break;
			}
			State = 175;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 172; blockTagContent();
					}
					} 
				}
				State = 177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTagNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(JavadocParser.NAME, 0); }
		public BlockTagNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockTagName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockTagName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockTagNameContext blockTagName() {
		BlockTagNameContext _localctx = new BlockTagNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockTagName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTagContentContext : ParserRuleContext {
		public BlockTagTextContext blockTagText() {
			return GetRuleContext<BlockTagTextContext>(0);
		}
		public InlineTagContext inlineTag() {
			return GetRuleContext<InlineTagContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(JavadocParser.NEWLINE, 0); }
		public BlockTagContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockTagContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockTagContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockTagContentContext blockTagContent() {
		BlockTagContentContext _localctx = new BlockTagContentContext(Context, State);
		EnterRule(_localctx, 26, RULE_blockTagContent);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
			case SPACE:
			case TEXT_CONTENT:
			case STAR:
			case SLASH:
			case BRACE_OPEN:
			case BRACE_CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180; blockTagText();
				}
				break;
			case INLINE_TAG_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181; inlineTag();
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTagTextContext : ParserRuleContext {
		public BlockTagTextElementContext[] blockTagTextElement() {
			return GetRuleContexts<BlockTagTextElementContext>();
		}
		public BlockTagTextElementContext blockTagTextElement(int i) {
			return GetRuleContext<BlockTagTextElementContext>(i);
		}
		public BlockTagTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockTagText; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockTagText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockTagTextContext blockTagText() {
		BlockTagTextContext _localctx = new BlockTagTextContext(Context, State);
		EnterRule(_localctx, 28, RULE_blockTagText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 185; blockTagTextElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 188;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTagTextElementContext : ParserRuleContext {
		public ITerminalNode TEXT_CONTENT() { return GetToken(JavadocParser.TEXT_CONTENT, 0); }
		public ITerminalNode NAME() { return GetToken(JavadocParser.NAME, 0); }
		public ITerminalNode SPACE() { return GetToken(JavadocParser.SPACE, 0); }
		public ITerminalNode STAR() { return GetToken(JavadocParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(JavadocParser.SLASH, 0); }
		public ITerminalNode BRACE_OPEN() { return GetToken(JavadocParser.BRACE_OPEN, 0); }
		public ITerminalNode BRACE_CLOSE() { return GetToken(JavadocParser.BRACE_CLOSE, 0); }
		public BlockTagTextElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockTagTextElement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockTagTextElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockTagTextElementContext blockTagTextElement() {
		BlockTagTextElementContext _localctx = new BlockTagTextElementContext(Context, State);
		EnterRule(_localctx, 30, RULE_blockTagTextElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << SPACE) | (1L << TEXT_CONTENT) | (1L << STAR) | (1L << SLASH) | (1L << BRACE_OPEN) | (1L << BRACE_CLOSE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineTagContext : ParserRuleContext {
		public ITerminalNode INLINE_TAG_START() { return GetToken(JavadocParser.INLINE_TAG_START, 0); }
		public InlineTagNameContext inlineTagName() {
			return GetRuleContext<InlineTagNameContext>(0);
		}
		public ITerminalNode BRACE_CLOSE() { return GetToken(JavadocParser.BRACE_CLOSE, 0); }
		public ITerminalNode[] SPACE() { return GetTokens(JavadocParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(JavadocParser.SPACE, i);
		}
		public InlineTagContentContext inlineTagContent() {
			return GetRuleContext<InlineTagContentContext>(0);
		}
		public InlineTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineTag; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineTagContext inlineTag() {
		InlineTagContext _localctx = new InlineTagContext(Context, State);
		EnterRule(_localctx, 32, RULE_inlineTag);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(INLINE_TAG_START);
			State = 193; inlineTagName();
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 194; Match(SPACE);
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << NEWLINE) | (1L << SPACE) | (1L << TEXT_CONTENT) | (1L << STAR) | (1L << SLASH) | (1L << BRACE_OPEN))) != 0)) {
				{
				State = 200; inlineTagContent();
				}
			}

			State = 203; Match(BRACE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineTagNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(JavadocParser.NAME, 0); }
		public InlineTagNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineTagName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineTagName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineTagNameContext inlineTagName() {
		InlineTagNameContext _localctx = new InlineTagNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_inlineTagName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineTagContentContext : ParserRuleContext {
		public BraceContentContext[] braceContent() {
			return GetRuleContexts<BraceContentContext>();
		}
		public BraceContentContext braceContent(int i) {
			return GetRuleContext<BraceContentContext>(i);
		}
		public InlineTagContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineTagContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineTagContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineTagContentContext inlineTagContent() {
		InlineTagContentContext _localctx = new InlineTagContentContext(Context, State);
		EnterRule(_localctx, 36, RULE_inlineTagContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 207; braceContent();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << NEWLINE) | (1L << SPACE) | (1L << TEXT_CONTENT) | (1L << STAR) | (1L << SLASH) | (1L << BRACE_OPEN))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceExpressionContext : ParserRuleContext {
		public ITerminalNode BRACE_OPEN() { return GetToken(JavadocParser.BRACE_OPEN, 0); }
		public ITerminalNode BRACE_CLOSE() { return GetToken(JavadocParser.BRACE_CLOSE, 0); }
		public BraceContentContext[] braceContent() {
			return GetRuleContexts<BraceContentContext>();
		}
		public BraceContentContext braceContent(int i) {
			return GetRuleContext<BraceContentContext>(i);
		}
		public BraceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BraceExpressionContext braceExpression() {
		BraceExpressionContext _localctx = new BraceExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_braceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(BRACE_OPEN);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << NEWLINE) | (1L << SPACE) | (1L << TEXT_CONTENT) | (1L << STAR) | (1L << SLASH) | (1L << BRACE_OPEN))) != 0)) {
				{
				{
				State = 213; braceContent();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 219; Match(BRACE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceContentContext : ParserRuleContext {
		public BraceExpressionContext braceExpression() {
			return GetRuleContext<BraceExpressionContext>(0);
		}
		public BraceTextContext[] braceText() {
			return GetRuleContexts<BraceTextContext>();
		}
		public BraceTextContext braceText(int i) {
			return GetRuleContext<BraceTextContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(JavadocParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(JavadocParser.NEWLINE, i);
		}
		public BraceContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BraceContentContext braceContent() {
		BraceContentContext _localctx = new BraceContentContext(Context, State);
		EnterRule(_localctx, 40, RULE_braceContent);
		try {
			int _alt;
			State = 235;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACE_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 221; braceExpression();
				}
				break;
			case NAME:
			case NEWLINE:
			case SPACE:
			case TEXT_CONTENT:
			case STAR:
			case SLASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222; braceText();
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 226;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 223; Match(NEWLINE);
								}
								} 
							}
							State = 228;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
						}
						State = 229; braceText();
						}
						} 
					}
					State = 234;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceTextContext : ParserRuleContext {
		public ITerminalNode TEXT_CONTENT() { return GetToken(JavadocParser.TEXT_CONTENT, 0); }
		public ITerminalNode NAME() { return GetToken(JavadocParser.NAME, 0); }
		public ITerminalNode SPACE() { return GetToken(JavadocParser.SPACE, 0); }
		public ITerminalNode STAR() { return GetToken(JavadocParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(JavadocParser.SLASH, 0); }
		public ITerminalNode NEWLINE() { return GetToken(JavadocParser.NEWLINE, 0); }
		public BraceTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceText; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavadocParserVisitor<TResult> typedVisitor = visitor as IJavadocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BraceTextContext braceText() {
		BraceTextContext _localctx = new BraceTextContext(Context, State);
		EnterRule(_localctx, 42, RULE_braceText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAME) | (1L << NEWLINE) | (1L << SPACE) | (1L << TEXT_CONTENT) | (1L << STAR) | (1L << SLASH))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', '\xF2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x32', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x35', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', '<', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '?', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x44', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'H', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'K', '\v', '\x3', '\x3', 
		'\x3', '\a', '\x3', 'N', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'Q', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', 'V', 
		'\n', '\x3', '\r', '\x3', '\xE', '\x3', 'W', '\x3', '\x3', '\a', '\x3', 
		'[', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '^', '\v', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x62', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', 'h', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', 'i', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'n', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'q', '\v', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'u', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 'x', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '|', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x7F', '\v', '\x6', '\x5', '\x6', 
		'\x81', '\n', '\x6', '\x3', '\a', '\x5', '\a', '\x84', '\n', '\a', '\x3', 
		'\a', '\x6', '\a', '\x87', '\n', '\a', '\r', '\a', '\xE', '\a', '\x88', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x8E', '\n', '\a', 
		'\f', '\a', '\xE', '\a', '\x91', '\v', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x97', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x6', '\n', '\x9C', '\n', '\n', '\r', '\n', 
		'\xE', '\n', '\x9D', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x6', '\f', 
		'\xA3', '\n', '\f', '\r', '\f', '\xE', '\f', '\xA4', '\x3', '\r', '\x5', 
		'\r', '\xA8', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\xAD', '\n', '\r', '\x3', '\r', '\a', '\r', '\xB0', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\xB3', '\v', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xBA', '\n', 
		'\xF', '\x3', '\x10', '\x6', '\x10', '\xBD', '\n', '\x10', '\r', '\x10', 
		'\xE', '\x10', '\xBE', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\xC6', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\xC9', '\v', '\x12', '\x3', '\x12', '\x5', '\x12', '\xCC', 
		'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x6', '\x14', '\xD3', '\n', '\x14', '\r', '\x14', '\xE', 
		'\x14', '\xD4', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xD9', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\xDC', '\v', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', 
		'\xE3', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xE6', '\v', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\xE9', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\xEC', '\v', '\x16', '\x5', '\x16', '\xEE', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x2', '\x2', '\x18', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '\x2', '\x6', 
		'\x3', '\x2', '\x4', '\x5', '\x6', '\x2', '\x3', '\x3', '\x6', '\x6', 
		'\b', '\t', '\r', '\xE', '\x6', '\x2', '\x3', '\x3', '\x5', '\x6', '\b', 
		'\t', '\r', '\xE', '\x4', '\x2', '\x3', '\x6', '\b', '\t', '\x2', '\x101', 
		'\x2', '\x43', '\x3', '\x2', '\x2', '\x2', '\x4', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x63', '\x3', '\x2', '\x2', '\x2', '\b', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x83', '\x3', '\x2', '\x2', '\x2', '\xE', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x96', '\x3', '\x2', '\x2', '\x2', '\x12', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xC0', '\x3', '\x2', '\x2', '\x2', '\"', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xCF', '\x3', '\x2', '\x2', '\x2', '&', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xD6', '\x3', '\x2', '\x2', '\x2', '*', '\xED', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xEF', '\x3', '\x2', '\x2', '\x2', '.', '\x44', 
		'\a', '\x2', '\x2', '\x3', '/', '\x33', '\a', '\n', '\x2', '\x2', '\x30', 
		'\x32', '\x5', '\x6', '\x4', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\x5', '\x4', '\x3', '\x2', '\x37', '\x38', '\a', 
		'\v', '\x2', '\x2', '\x38', '\x39', '\a', '\x2', '\x2', '\x3', '\x39', 
		'\x44', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x5', '\x6', '\x4', '\x2', 
		';', ':', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', 
		'=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '@', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\x5', '\x4', '\x3', '\x2', '\x41', '\x42', '\a', '\x2', 
		'\x2', '\x3', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', '\x43', '.', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '/', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x44', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x45', 'I', '\x5', '\b', '\x5', '\x2', '\x46', 'H', '\x5', '\x6', '\x4', 
		'\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x62', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'N', '\x5', '\x6', '\x4', '\x2', 'M', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', '\x62', 
		'\x5', '\x16', '\f', '\x2', 'S', 'U', '\x5', '\b', '\x5', '\x2', 'T', 
		'V', '\a', '\x4', '\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 
		'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '\\', '\x3', '\x2', '\x2', 
		'\x2', 'Y', '[', '\x5', '\x6', '\x4', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '_', '\x3', 
		'\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', '`', 
		'\x5', '\x16', '\f', '\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x61', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x61', 'S', '\x3', '\x2', '\x2', '\x2', '\x62', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\t', '\x2', '\x2', '\x2', '\x64', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x65', 'o', '\x5', '\n', '\x6', '\x2', 
		'\x66', 'h', '\x5', '\x14', '\v', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\x5', '\n', '\x6', '\x2', 'l', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'g', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'p', '\t', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'v', '\x5', '\f', '\a', '\x2', 's', 'u', '\x5', '\x10', 
		'\t', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'w', '\x81', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'y', '}', '\x5', '\"', '\x12', '\x2', 'z', '|', '\x5', 
		'\x10', '\t', '\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', 
		'~', '\x3', '\x2', '\x2', '\x2', '~', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', 'r', '\x3', '\x2', '\x2', 
		'\x2', '\x80', 'y', '\x3', '\x2', '\x2', '\x2', '\x81', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x84', '\a', '\x5', '\x2', '\x2', '\x83', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', '\x87', '\x5', '\xE', 
		'\b', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8E', '\x5', '\xE', '\b', '\x2', '\x8B', '\x8E', 
		'\a', '\x5', '\x2', '\x2', '\x8C', '\x8E', '\a', '\a', '\x2', '\x2', '\x8D', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\t', 
		'\x3', '\x2', '\x2', '\x93', '\xF', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x97', '\x5', '\"', '\x12', '\x2', '\x95', '\x97', '\x5', '\x12', '\n', 
		'\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x11', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x9C', '\x5', '\xE', '\b', '\x2', '\x99', '\x9C', '\a', '\x5', '\x2', 
		'\x2', '\x9A', '\x9C', '\a', '\a', '\x2', '\x2', '\x9B', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x13', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA0', '\a', '\x4', '\x2', '\x2', '\xA0', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA3', '\x5', '\x18', '\r', '\x2', '\xA2', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA8', '\a', 
		'\x5', '\x2', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', '\a', '\x2', '\x2', '\xAA', '\xAC', '\x5', 
		'\x1A', '\xE', '\x2', '\xAB', '\xAD', '\a', '\x5', '\x2', '\x2', '\xAC', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', '\x5', 
		'\x1C', '\xF', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB5', '\a', '\x3', '\x2', '\x2', '\xB5', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xBA', '\x5', '\x1E', '\x10', '\x2', '\xB7', '\xBA', '\x5', 
		'\"', '\x12', '\x2', '\xB8', '\xBA', '\a', '\x4', '\x2', '\x2', '\xB9', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBD', '\x5', ' ', '\x11', '\x2', '\xBC', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\t', '\x4', '\x2', '\x2', '\xC1', '!', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC3', '\a', '\f', '\x2', '\x2', '\xC3', '\xC7', '\x5', '$', 
		'\x13', '\x2', '\xC4', '\xC6', '\a', '\x5', '\x2', '\x2', '\xC5', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', '\x5', '&', '\x14', '\x2', 
		'\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', 
		'\a', '\xE', '\x2', '\x2', '\xCE', '#', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\a', '\x3', '\x2', '\x2', '\xD0', '%', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD3', '\x5', '*', '\x16', '\x2', '\xD2', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\'', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xDA', '\a', '\r', 
		'\x2', '\x2', '\xD7', '\xD9', '\x5', '*', '\x16', '\x2', '\xD8', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '\xE', '\x2', '\x2', 
		'\xDE', ')', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xEE', '\x5', '(', '\x15', 
		'\x2', '\xE0', '\xEA', '\x5', ',', '\x17', '\x2', '\xE1', '\xE3', '\a', 
		'\x4', '\x2', '\x2', '\xE2', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE9', '\x5', ',', '\x17', '\x2', '\xE8', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xED', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '+', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\t', '\x5', '\x2', '\x2', '\xF0', '-', '\x3', '\x2', '\x2', '\x2', 
		'#', '\x33', '=', '\x43', 'I', 'O', 'W', '\\', '\x61', 'i', 'o', 'v', 
		'}', '\x80', '\x83', '\x88', '\x8D', '\x8F', '\x96', '\x9B', '\x9D', '\xA4', 
		'\xA7', '\xAC', '\xB1', '\xB9', '\xBE', '\xC7', '\xCB', '\xD4', '\xDA', 
		'\xE4', '\xEA', '\xED',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Eir.JavaDocParser.Parser
